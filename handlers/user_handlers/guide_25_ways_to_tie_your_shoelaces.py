from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from loguru import logger

from database.database import get_user_data_from_db_email
from database.database import recording_data_email
from keyboards.user_keyboards.user_keyboards import keyboard_to_fill_email_guide_25
from keyboards.user_keyboards.user_keyboards import main_menu_ke
from keyboards.user_keyboards.user_keyboards import main_menu_size_table
from keyboards.user_keyboards.user_keyboards import next_time_main_menu_ke
from system.dispatcher import bot, dp


class Email_guide_25(StatesGroup):
    email_guide_25 = State()


@dp.callback_query_handler(lambda c: c.data == "guide_25_ways_to_tie_your_shoelaces")
async def guide_25_ways_to_tie_your_shoelaces(callback_query: types.CallbackQuery, state: FSMContext):
    """–ì–∞–π–¥ 25 —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–≤—è–∑–∞—Ç—å —à–Ω—É—Ä–∫–∏"""
    try:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_data = get_user_data_from_db_email(callback_query.from_user.id)
        if user_data:
            greeting_message = f'–ü–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç TWIN!'
            logger.info('–ì—Ä—É–∑–∏–º —Ñ–∞–π–ª –ì–∞–π–¥_TWIN.pdf')
            main_menu_key = main_menu_ke()
            with open('media/document/–ì–∞–π–¥_TWIN.pdf', 'rb') as documents:
                await bot.send_document(callback_query.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                        caption=greeting_message,  # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                                        document=documents,
                                        reply_markup=main_menu_key,
                                        parse_mode=types.ParseMode.HTML)  # –¢–µ–∫—Å—Ç –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        else:
            main_menu_key = keyboard_to_fill_email_guide_25()
            text_mes = ('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∞–π–¥ '
                        '¬´25 —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–≤—è–∑–∞—Ç—å —à–Ω—É—Ä–∫–∏¬ª.')
            await bot.send_message(callback_query.from_user.id, text_mes, reply_markup=main_menu_key)
    except Exception as error:
        logger.exception(error)


@dp.callback_query_handler(lambda c: c.data == 'next_time')
async def next_time(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        text_mes = ('–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤–∞—à–µ–≥–æ '
                    '—Ä–∞–∑–º–µ—Ä–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ WhatsApp –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞:\n\n'
                    'üëá\n'
                    '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (https://wa.me/79198438647)')
        main_menu_key = next_time_main_menu_ke()
        await bot.send_message(callback_query.from_user.id, text=text_mes, reply_markup=main_menu_key)
    except Exception as error:
        logger.exception(error)


@dp.callback_query_handler(lambda c: c.data == 'ill_in_email_guide_25')
async def ill_in_email(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ email"""
    try:
        await state.reset_state()
        await Email_guide_25.email_guide_25.set()
        text_mes = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email. –ù–∞–ø—Ä–∏–º–µ—Ä: twin@mail.ru."
        await bot.send_message(callback_query.from_user.id, text_mes)
    except Exception as error:
        logger.exception(error)


@dp.message_handler(state=Email_guide_25.email_guide_25)
async def write_email_handler(message: types.Message, state: FSMContext):
    email = message.text
    await state.update_data(name=email)
    registration_date = message.date.strftime("%Y-%m-%d %H:%M:%S")
    recording_data_email(message.from_user.id, message.from_user.username, email, registration_date)
    greeting_message = f"–¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ ¬´TWIN¬ª"
    main_menu_key = main_menu_size_table()
    with open('media/document/–ì–∞–π–¥_TWIN.pdf', 'rb') as documents:
        await bot.send_document(message.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                caption=greeting_message,  # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                                document=documents,
                                reply_markup=main_menu_key,
                                parse_mode=types.ParseMode.HTML)  # –¢–µ–∫—Å—Ç –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏


def register_shoelaces_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.register_message_handler(guide_25_ways_to_tie_your_shoelaces)
    dp.register_message_handler(next_time)
