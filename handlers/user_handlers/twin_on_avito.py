from aiogram import types
from aiogram.dispatcher import FSMContext  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from loguru import logger

from keyboards.user_keyboards.user_keyboards import main_menu_key_avito
from system.dispatcher import bot, dp


@dp.callback_query_handler(lambda c: c.data == "TWIN_on_Avito")
async def TWIN_on_Avito(callback_query: types.CallbackQuery, state: FSMContext):
    """TWIN –Ω–∞ Avito"""
    try:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        greeting_message = (f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –Ω–∞ Avito ‚ùì\n\n"
                            f"–≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ ‚ùó\n\n"
                            f"–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à –ø—Ä–æ—Ñ–∏–ª—å Avito (http://avito.ru/brands/twin) –∏ –∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è "
                            f"—Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º ¬´10–ë–û–¢¬ª üëç\n\n"
                            f"üëâ –ü—Ä–æ–º–æ–∫–æ–¥ ¬´10–ë–û–¢¬ª –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–∫–∏–¥–∫—É 10% –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑.\n\n"
                            f"–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ üòá")
        main_menu_key = main_menu_key_avito()
        await bot.send_message(callback_query.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                               text=greeting_message,  # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
                               reply_markup=main_menu_key,
                               parse_mode=types.ParseMode.HTML)  # –¢–µ–∫—Å—Ç –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    except Exception as error:
        logger.exception(error)


def register_TWIN_on_Avito_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.register_message_handler(TWIN_on_Avito)
